using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace appCompilador
{
    public class ParserConstants
    {
        public readonly int START_SYMBOL = 36;

        public readonly int FIRST_NON_TERMINAL = 36;
        public readonly int FIRST_SEMANTIC_ACTION = 69;


        public readonly int[,] PARSER_TABLE =
        {
            { -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1,  1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1,  4, -1, -1, -1, -1, -1, -1,  7, -1, -1, -1, -1,  5,  6,  6,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  9, 10, -1, -1 },
            { -1, 14, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, 15, 16, 16, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, 41, 41, 41, 41, -1, -1, -1, -1, -1, -1, 41, 41, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, 41, 41, -1, -1, -1, -1, -1, 41, -1 },
            { -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, 21, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, 23 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, 27, 27, 27, 27, -1, -1, -1, -1, -1, -1, 27, 27, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, 27, 27, -1, -1, -1, -1, -1, 27, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, 28 },
            { -1, -1, -1, -1, -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, 35, -1, -1, -1, -1, -1, -1, 35, -1, -1, -1, -1, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, 37, -1, -1, -1, -1, -1, 36, 37, 36, 36, -1, -1, 37, 37, 37, 37, 36, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, 34, -1, 33, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, 42, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, 42, 42, 42, 42, -1, -1, 43, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, 42, -1, -1, 42 },
            { -1, 45, 45, 45, 45, -1, -1, -1, -1, -1, -1, 47, 46, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, 45, 45, -1, -1, -1, -1, -1, 45, -1 },
            { -1, 49, 49, 49, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, 49, -1, -1, -1, -1, -1, 49, -1 },
            { -1, 50, -1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, 50, 50, 50, 50, -1, -1, 50, 50, -1, 51, 51, 51, 51, -1, -1, -1, -1, 50, 50, -1, -1, 50 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 53, 54, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, 56, 56, 56, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 56, -1, -1, -1, -1, -1, 56, -1 },
            { -1, 57, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, 57, 57, 57, 57, -1, -1, 57, 57, -1, 57, 57, 57, 57, 58, 59, -1, -1, 57, 57, -1, -1, 57 },
            { -1, 60, 60, 60, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 60, -1, -1, -1, -1, -1, 60, -1 },
            { -1, 61, -1, -1, -1, -1, -1, -1, 61, -1, -1, -1, -1, 61, 61, 61, 61, -1, -1, 61, 61, -1, 61, 61, 61, 61, 61, 61, 62, 63, 61, 61, -1, -1, 61 },
            { -1, 64, 65, 66, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69, 70, -1, -1, -1, -1, -1, 68, -1 },
            { -1,  3, -1, -1, -1, -1, -1,  2,  3, -1, -1, -1, -1,  3,  3,  3,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 12, 12, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
        };

        public readonly int[][] PRODUCTIONS =
        {
            [ 169,   7,  37,   8, 170 ],
            [  38,  32,  65 ],
            [   0 ],
            [  38,  32,  65 ],
            [   2, 173,  66,  39 ],
            [  44 ],
            [  47 ],
            [  50 ],
            [  54 ],
            [ 171 ],
            [  33,  42, 172 ],
            [   2, 173,  66 ],
            [   0 ],
            [  31,   2, 173,  66 ],
            [  43 ],
            [  44 ],
            [  47 ],
            [  50 ],
            [  54 ],
            [  41,  33,  42, 172 ],
            [  14,  34,  45,  35 ],
            [   2, 174,  46 ],
            [   5, 175,  31,   2, 174,  46 ],
            [   0 ],
            [  31,  45 ],
            [  15,  34,  48,  35 ],
            [  16,  34,  48,  35, 176 ],
            [  42, 177,  49 ],
            [   0 ],
            [  31,  48 ],
            [   9,  42, 178,  51,  53, 179,  67, 180,   8 ],
            [   0 ],
            [  11,  51 ],
            [ 179,  10,  42, 181,  51,  53 ],
            [   0 ],
            [  40,  32,  52 ],
            [   0 ],
            [  51 ],
            [ 182,  17,  51,  68 ],
            [  19,  42, 183 ],
            [  18,  42, 184 ],
            [  56,  55 ],
            [   0 ],
            [  20,  56, 185,  55 ],
            [  21,  56, 186,  55 ],
            [  57 ],
            [  13, 187 ],
            [  12, 188 ],
            [  22,  56, 189 ],
            [  60,  58 ],
            [   0 ],
            [  59, 190,  60, 191 ],
            [  23 ],
            [  24 ],
            [  25 ],
            [  26 ],
            [  62,  61 ],
            [   0 ],
            [  27,  62, 192,  61 ],
            [  28,  62, 193,  61 ],
            [  64,  63 ],
            [   0 ],
            [  29,  64, 194,  63 ],
            [  30,  64, 195,  63 ],
            [   2, 196 ],
            [   3, 197 ],
            [   4, 198 ],
            [   5, 199 ],
            [  34,  42,  35 ],
            [  27,  64 ],
            [  28,  64, 200 ]

    };


        public readonly String[] PARSER_ERROR =
        {
            "",
            "esperado EOF",
            "esperado identificador",
            "esperado constante_int",
            "esperado constante_float",
            "esperado constante_string",
            "esperado palavra reservada",
            "esperado main",
            "esperado end",
            "esperado if",
            "esperado elif",
            "esperado else",
            "esperado false",
            "esperado true",
            "esperado read",
            "esperado write",
            "esperado writeln",
            "esperado repeat",
            "esperado until",
            "esperado while",
            "esperado &&",
            "esperado ||",
            "esperado !",
            "esperado ==",
            "esperado !=",
            "esperado <",
            "esperado >",
            "esperado +",
            "esperado -",
            "esperado *",
            "esperado /",
            "esperado ,",
            "esperado ;",
            "esperado =",
            "esperado (",
            "esperado )",
            "esperado main", 		//"<program> inválido",
            "esperado identificador  if  read  write  writeln  repeat", 		//"<lista_intrucao> inválido",
            "esperado identificador  if  read  write  writeln  repeat", 		//"<instrucao> inválido",
            "esperado ;  =", 		//"<instrucao1> inválido",
            "esperado identificador if  read  write  writeln  repeat", 		//"<cmd> inválido",
            "esperado identificador", 		//"<lista_id> inválido",
            "esperado expressao", 		//"<expressao> inválido",
            "esperado identificador", 		//"<cmd_atribuicao> inválido",
            "esperado read", 		//"<cmd_entrada> inválido",
            "esperado identificador  constante_string", 		//"<lista_entrada> inválido",
            "esperado ,  )", 		//"<lista_entrada1> inválido",
            "esperado write  writeln  ", 		//"<cmd_saida> inválido",
            "esperado expressao", 		//"<lista_expressao> inválido",
            "esperado ,  )", 		//"<lista_expressao1> inválido",
            "esperado if", 		//"<cmd_selecao> inválido",
            "esperado identificador  if  read  write  writeln  repeat", 		//"<lista_cmd> inválido",
            "esperado identificador  end  if  elif  else  read  write  writeln  repeat  until  while", 		//"<lista_cmd1> inválido",
            "esperado end  elif  else", 		//"<lista_elif> inválido",
            "esperado repeat", 		//"<cmd_repeticao> inválido",
            "esperado expressao", 		//"<expressao1> inválido",
            "esperado expressao", 		//"<elemento> inválido",
            "esperado expressao", 		//"<relacional> inválido",
            "esperado expressao", 		//"<relacional1> inválido",
            "esperado ==  !=  <  >", 		//"<operador_relacional> inválido",
            "esperado expressao", 		//"<aritmetica> inválido",
            "esperado expressao", 		//"<aritmetica1> inválido",
            "esperado expressao", 		//"<termo> inválido",
            "esperado expressao", 		//"<termo1> inválido",
            "esperado expressao", 		//"<fator> inválido",
            "esperado identificador  end  if  read  write  writeln  repeat", 		//"<lista_intrucao1> inválido",
            "esperado ,  ;  =", 		//"<lista_id1> inválido", // 66
            "esperado end  else", 		//"<else_case> inválido",
            "esperado until  while", 		//"<while_until> inválido"
        };
    }

}
